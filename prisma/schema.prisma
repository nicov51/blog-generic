// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? // si tu veux login avec credentials
  accounts      Account[]
  sessions      Session[]
  Review        Review[]
  Like          Like[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id        String    @id @default(cuid())
  title     String
  content   String
  imageUrl  String?
  slug      String    @unique
  category  Category?
  author    String?
  createdAt DateTime  @default(now())
  views     Int       @default(0) // Nombre de vues
  shares    Int       @default(0) // Nombre de partages
  reviews   Review[]
  likes     Like[]
}

enum Category {
  TECHNIQUE
  PLAFOND
  CONFORT
  ESTHETIQUE
  INNOVATION
}

model Review {
  id        String @id @default(cuid())
  content   String
  rating    Int
  userId    String
  articleId String

  user    User    @relation(fields: [userId], references: [id])
  article Article @relation(fields: [articleId], references: [id])

  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  article Article @relation(fields: [articleId], references: [id])

  @@unique([userId, articleId]) // Un user peut liker un article UNE seule fois
}
